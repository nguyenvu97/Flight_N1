version: '3'
services:
  zookeeper:
    image: quay.io/debezium/zookeeper:${DEBEZIUM_VERSION}
    container_name: demo_zookeeper
    ports:
      - 2182:2181
      - 2888:2888
      - 3888:3888
  kafka:
    image: quay.io/debezium/kafka:${DEBEZIUM_VERSION}
    container_name: demo_kafka
    ports:
      - 9093:9092
    links:
      - zookeeper
    environment:
      - ZOOKEEPER_CONNECT=zookeeper:2181
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: demo_kafka-ui
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: demo_kafka:9092
    ports:
      - "9089:8080"
    links:
      - kafka
  mysql:
    image: quay.io/debezium/example-mysql:${DEBEZIUM_VERSION}
    container_name: demo_mysql_container
    environment:
      MYSQL_ROOT_PASSWORD: root1234
#      MYSQL_DATABASE: inventory
      MYSQL_USER: crm_user
      MYSQL_PASSWORD: root1234
    ports:
        - "30306:3306"
    volumes:
       - ./init-db.sh:/docker-entrypoint-initdb.d/init-db.sh

  connect:
    image: quay.io/debezium/connect:${DEBEZIUM_VERSION}
    container_name: demo_connect
    ports:
      - 8083:8083
    links:
      - kafka
      - mysql
    environment:
      - BOOTSTRAP_SERVERS=kafka:9092
      - GROUP_ID=1
      - CONFIG_STORAGE_TOPIC=my_connect_configs
      - OFFSET_STORAGE_TOPIC=my_connect_offsets
      - STATUS_STORAGE_TOPIC=my_connect_statuses

  keycloak:
    container_name: keycloak
    image: keycloak/keycloak:23.0.4-0
    ports:
      - 8081:8080
    links:
      - mysql
    environment:
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=admin
      - KC_DB=mysql
      - KC_DB_URL=jdbc:mysql://mysql:3306/keycloak
      - KC_DB_USERNAME=root
      - KC_DB_PASSWORD=root1234
    volumes:
      - ${HOME}/docker_volumes/keycloak:/opt/keycloak/data
    command: start-dev

  mongoMaster:
    container_name: mongoMaster
    image: mongo:latest
    ports:
      - 27017:27017
    command: [ "mongod", "--replSet", "rs0" ]
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: Vu123456
      MONGO_INITDB_REPLICASET: rs0
    restart: always
    networks:
      - mongodb
    volumes:
      - ./mongoDb/primary:/data/db

  mongoSecondary:
      container_name: mongoSecondary
      image: mongo:latest
      ports:
        - 27018:27017
      command: [ "mongod", "--replSet", "rs0" ]
      environment:
        ME_CONFIG_MONGODB_ADMINUSERNAME: root
        ME_CONFIG_MONGODB_ADMINPASSWORD: Vu123456
        MONGO_INITDB_REPLICASET: rs0
      restart: always
      networks:
        - mongodb
      volumes:
        - ./mongoDb/secondary:/data/db


#docker exec -it mongoMaster mongosh --eval " rs.initiate({ _id: \"rs0\", version: 1, members: [ { _id: 0, host: \"mongoMaster:27017\" }, { _id: 1, host: \"mongoSecondary:27017\" } ] }); "â€¨
volumes:
  mongoDb:
  mongoDb1:

networks:
  mongodb:
    driver: bridge